import { GoogleGenAI } from '@google/genai';

interface GenerateImageOptions {
    numberOfImages: number;
    aspectRatio: '1:1' | '16:9' | '9:16' | '4:3' | '3:4';
}

export const generateImage = async (
    prompt: string, 
    options: GenerateImageOptions
): Promise<{ mimeType: string; data: string }[]> => {
    const ai = new GoogleGenAI({ apiKey: 'AIzaSyB1HO26iQJFOEh4LT-HrPW0HtjIwFae4VU' });
    
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: options.numberOfImages,
                aspectRatio: options.aspectRatio,
                outputMimeType: 'image/png',
            },
        });

        if (!response.generatedImages) {
            throw new Error('No images were generated by the API.');
        }

        const imageData = response.generatedImages.map(img => {
            if (!img.image?.imageBytes) {
                throw new Error('Image data is missing from the Gemini response.');
            }
            return {
                data: img.image.imageBytes,
                mimeType: 'image/png', // Gemini generateImages returns PNG
            };
        });

        if (imageData.length === 0) {
            throw new Error('No images were generated.');
        }

        return imageData;

    } catch (error) {
        console.error('Gemini Image Generation Error:', error);
        // Pass the error up to be handled by the UI component
        if (error instanceof Error) {
            throw new Error(`[Gemini API] ${error.message}`);
        }
        throw new Error('An unknown error occurred during image generation.');
    }
};